<?php
// $Id: site_user_list.module,v 1.4 2009/06/24 17:14:26 pukku Exp $

/**
 * @file
 * This module displays a list of users on the site.  It's very
 * configurable, with a lot of hooks
 */
 
 /**
  * hook documentation
  */

 /**
 * hook_site_user_list_fields()
 *
 * This hook returns a list of available fields for the user to select from.
 * It should return an array of fields.  Each field should have an identifier,
 * which the module can use later to determine if the belongs to the module.
 * By convention, all the fields I've defined are prefixed with '@', and correspond
 * to a database column with an '@'
 *
 * return array(
 *   '@identifier' => array(
 *     'display_name' => 'Display Name',
 *     'description' => 'Description',
 *     'db_column' => 'database column to select',
 *     'column_header' => 'title to display',
 *     'default_template' => 'a display template',
 *     'eval_template' => should eval be applied to the template,
 *     'search_column' => 'the column to use for searching',
 *     'sort_column' => 'the column to use for sorting',
 *   )
 * );
 *
 * 'display_name' is a name to use for displaying in the settings screen.
 * 'description' should be a short description of what the field is, which is shown on the settings screen.
 * 'db_column' should be the name of the database column to select to display the value
 * 'column_header' is the column title to display at the top of listing
 * 'default_template' is the template to use for this field.
 * 'eval_template' should be true if the default_template should be 'eval'd.
 * 'search_column' should be the column to search on.
 * 'sort_column' should be the column to use for sorting.
 *
 * Note that it's possible for hook_site_user_list_query_sql to return multiple columns for each
 * database column.  This is why there is db_column, search_column, and sort_column separately.
 * You might want to have a date column which is displayed as 'May 12, 2007', but sort on a version
 * which is stored as '2007-05-12'.
 * Note that some of these values can be overridden by the user.
 *
 */

/**
 * hook_site_user_list_query_sql($allowed = array())
 *
 * $allowed is an array of all the field identifiers which will be included.
 * Modules should use this to determine what SQL to return
 *
 */

/**
 * hook_site_user_list_search_form($search = array())
 */

/**
 * hook_site_user_list_restrict($search = array())
 */

define('SITE_USER_LIST_NO_DISPLAY', 0);
define('SITE_USER_LIST_HIDDEN_DISPLAY', 1);
define('SITE_USER_LIST_MAY_DISPLAY', 2);
define('SITE_USER_LIST_DEFAULT_DISPLAY', 3);
define('SITE_USER_LIST_ALWAYS_DISPLAY', 4);

/**
 * Implementation of hook_perm().
 */
function site_user_list_perm() {
  return array('view site user list');
}

/**
 * Implementation of hook_menu().
 */
function site_user_list_menu() {
  $items = array();
  
  $items['admin/settings/site_user_list'] = array(
    'title'            => 'Site user list',
    'description'      => 'Change settings for the site user list',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('site_user_list_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'file' => 'site_user_list.admin.inc',
  );
  $items['admin/settings/site_user_list/general'] = array(
    'title'            => 'General',
    'weight'           => -100,
    'type'             => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/site_user_list/fields'] = array(
    'title' => 'Fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_user_list_fields_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'site_user_list.admin.inc',
  );
  
  $items['site_user_list'] = array(
    'title' => variable_get('site_user_list_title', 'Site user list'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_user_list_form'),
    'access arguments' => array('view site user list'),
  );
  
  $items['site_user_list/rebuild'] = array(
    'title' => 'Rebuild site user list',
    'page callback' => 'site_user_list_rebuild_page',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  
  // The following would ideally be in profile.module...
  $items['admin/settings/site_user_list/profile'] = array(
    'title' => 'Profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile_site_user_list_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    // This would be in a separate file, except that then the
    // hooks wouldn't work correctly...
  );

  return $items;
}


/**
 * Implementation of hook_cron().
 */
function site_user_list_cron() {
  if (variable_get('site_user_list_use_cron', 0)) {
    site_user_list_build();
  }
}

/**
 * Implementation of hook_enable().
 */
function site_user_list_enable() {
  site_user_list_build();
}


/**
 * Create the database view, database table, or stored query.
 * This should be called when things could have changed.
 */
function site_user_list_build() {
  // We always include the @uid column, even if the user doesn't want to display it
  // This is the "unique id" / "primary key" column...
  $cols = array(
    'u.uid as ' . site_user_list_escape_column("@uid"),
  );

  $joins = array(
    '{users} as u',
  );

  // never include user 0, who exists in the database for the anonymous user
  $where = array(
    '(u.uid != 0)',
  );

  // if we don't include blocked users, we need to filter on status = not blocked
  if (!variable_get('site_user_list_include_blocked_users', 0)) {
    $where[] = '(u.status = 1)';
  }

  // because modules need to know which of their fields have been included by the user, we
  // pass them an array of all the field identifiers which should be displayed.  They
  // should check in this array to determine which fields they need to include in the SQL
  $valid_fields_q = db_query("SELECT field_identifier FROM {site_user_list_fields} WHERE display > %d", SITE_USER_LIST_NO_DISPLAY);
  $valid_fields = array();
  while($f = db_fetch_array($valid_fields_q)) {
    $valid_fields[$f['field_identifier']] = $f['field_identifier'];
  }

  // run hook_site_user_list_query_sql and merge the results back into
  // $cols, $joins, $where.
  $query = module_invoke_all('site_user_list_query_sql', $valid_fields);
  foreach ($query as $m => $items) {
    if (!empty($items['cols'])) {
      $cols = array_merge($cols, $items['cols']);
    }
    if (!empty($items['joins'])) {
      $joins = array_merge($joins, $items['joins']);
    }
    if (!empty($items['where'])) {
      $where = array_merge($where, $items['where']);
    }
  }

  // build the SQL query that we'll use
  $internal_sql = "SELECT DISTINCT " . implode(", ", $cols) . " "
                . "FROM " . implode(" ", $joins) . " "
                . "WHERE " . implode(" AND ", $where)
                ;

  // now that we've got the query, save what ever we need
  // either by saving the query, or by creating the database items needed
  $type = variable_get('site_user_list_query_type', 'query');
  $name = variable_get('site_user_list_select_from', '{site_user_list_' . $type . '}');
  $log = variable_get('site_user_list_log_rebuilds', 0);
  if ($type == 'query') {
    variable_set('site_user_list_select_from', '(' . $internal_sql . ')');
    if ($log) {
      watchdog('site_user_list', 'Rebuilt query with sql: ' . $internal_sql);
    }
  }
  elseif ($type == 'view') {
    db_query("CREATE OR REPLACE VIEW $name AS " . $internal_sql);
    if ($log) {
      watchdog('site_user_list', 'Rebuilt view with sql: CREATE OR REPLACE VIEW ' . $name . ' AS ' . $internal_sql);
    }
  }
  elseif ($type == 'table') {
    if (db_table_exists($name)) {
      db_query("DROP TABLE $name");
      if ($log) {
        watchdog('site_user_list', 'Removed existing table with sql: DROP TABLE ' . $name);
      }
    }
    db_query("CREATE TABLE $name AS " . $internal_sql);
    if ($log) {
      watchdog('site_user_list', 'Created table with sql: CREATE TABLE ' . $name . ' AS ' .$internal_sql);
    }
  }
}

/**
 * Display the site user list. This is the whole point of the module.
 */
function site_user_list_form($form_state = NULL) {
  drupal_add_css(drupal_get_path('module', 'site_user_list') . '/site_user_list.css');

  global $user;
  
  $form = array();

  // if we don't have a proper setting for this, things will get ugly later on, so
  // error out now...
  $select_from = variable_get('site_user_list_select_from', '');
  if ($select_from == '') {
    drupal_set_message('This module has not been properly configured; please talk with your administrator', 'error');
    return array();
  }
  
  // some initial set up stuff for the form
  $form['#method'] = 'get';
  $form['q'] = array(
    '#input' => false,
    '#type' => 'hidden',
    '#value' => $_REQUEST['q'],
    '#name' => 'q',
  );
  $form['sort'] = array(
    '#input' => false,
    '#type' => 'hidden',
    '#value' => $_REQUEST['sort'],
    '#name' => 'sort',
  );
  $form['order'] = array(
    '#input' => false,
    '#type' => 'hidden',
    '#value' => $_REQUEST['order'],
    '#name' => 'order',
  );
  
  // get the fields information from the database
  $fields = array();
  $fields_query = db_query("SELECT * FROM {site_user_list_fields} WHERE display > 0 ORDER BY weight");
  while($f = db_fetch_array($fields_query)) {
    $name = $f['field_identifier'];
    $fields[$name] = $f;
  }

  // set up the fields to be selected
  // note that this is _not_ something that other modules can affect.
  // we also build the table column header (because I only want to iterate
  //   through $fields once)
  // at the same time, we determine which fields are visible
  $display_header = array();
  
  $display_available = array();
  $display = array();
  
  $select = array();
  $select[] = site_user_list_escape_column("@uid"); // always select the uid

  foreach ($fields as $name => $f) {
    // determine which columns should be displayed
    // if there is the data from the display form, use that
    // otherwise, just take default (and always) options
    $to_be_displayed = false;
    if ($_REQUEST['d']) {
      if (($f['display'] == SITE_USER_LIST_ALWAYS_DISPLAY) or ($_REQUEST['d'][$name])) {
        $display[] = $name;
        $to_be_displayed = true;
      }
    }
    else {
      if ($f['display'] >= SITE_USER_LIST_DEFAULT_DISPLAY) {
        $display[] = $name;
        $to_be_displayed = true;
      }
    }
    
    // set up the table header
    if ($to_be_displayed) {
      $temp_header = array();
      if (!empty($f['column_header'])) {
        $temp_header['data'] = $f['column_header'];
      }
      if (!empty($f['sort_column'])) {
        $temp_header['field'] = site_user_list_escape_column($f['sort_column']);
      }
      
      $display_header[] = $temp_header;
    }
    
    // make a list of the columns whose display we can control
    if (($f['display'] == SITE_USER_LIST_MAY_DISPLAY) or ($f['display'] == SITE_USER_LIST_DEFAULT_DISPLAY)) {
      $display_available[$name] = $f['column_header'];
    }

    // add the column to be selected
    // we don't duplicate @uid, and we special case @user_view and @user_edit, so
    // in these cases we don't want to add the column
    if (!empty($f['db_column']) and ($name != '@uid')) {
      $select[] = site_user_list_escape_column($f['db_column']);
    }
  }

  // get the information from modules about how to restrict the result set
  $joins = array();
  $where = array();
  $descriptions = array();
  
  $restrictions = module_invoke_all('site_user_list_restrict', $_REQUEST['s']);
  foreach ($restrictions as $module => $module_restrictions) {
    if (!empty($module_restrictions['joins'])) {
      $joins = array_merge($joins, $module_restrictions['joins']);
    }
    if (!empty($module_restrictions['where'])) {
      $where = array_merge($where, $module_restrictions['where']);
    }
    if (!empty($module_restrictions['description'])) {
      $descriptions = array_merge($descriptions, $module_restrictions['description']);
    }
  }
  
  // finally, build up the query
  $sql = 'SELECT DISTINCT ' . implode(", ", $select) . ' '
       . 'FROM ' . $select_from . ' as cd '
       . implode(' ', $joins) . ' '
       . (count($where) ? 'WHERE ' . implode(' AND ', $where) : '')
       ;
  $sql .= site_user_list_tablesort_sql($display_header);

  $res = db_query($sql);

  $rows = array();
  
  // some variables that we will be using below; we don't want to
  // have a function call for every row that we can avoid; these
  // values are static, so we can cache them.
  $can_view = user_access('access user profiles');
  $can_edit = user_access('administer users');
  $destination = drupal_get_destination();
  $base_path = base_path();
  
  while($r = db_fetch_array($res)) {
    $r['@_base'] = $base_path;
    $r['@_dest'] = $destination;
    
    $row = array();
    
    foreach ($display as $f) {
      // we special case @user_view and @user_edit because we want to do
      // wacky things with them
      if (($f != '@user_view') and ($f != '@user_edit')) {
        $template_condition_ok = true;
        if (!empty($fields[$f]['template_condition_columns'])) {
          foreach (explode(',', $fields[$f]['template_condition_columns']) as $condition_column) {
            if (!isset($r[$condition_column]) or $r[$condition_column] == '') {
              $template_condition_ok = false;
            }
          }
        }
        
        if ($template_condition_ok) {
          if ($fields[$f]['eval_template']) {
            // if the template should be evaluated, eval it
            $row[] = drupal_eval('<?php ' . $fields[$f]['template'] . '?>');
          }
          else {
            // otherwise, use strtr passing the available columns for simple replacement
            $row[] = strtr($fields[$f]['template'], $r);
          }
        }
        else {
          $row[] = '';
        }
      }
          // special case @user_view and @user_edit
          // this would be possible, in principle, using eval'd template, but it's
          // so common a need that I don't want to get a huge slow down from eval
      elseif (($f == '@user_view') and (($r['@uid'] == $user->uid) or ($can_view))) {
        $row[] = l($fields[$f]['template'], "user/" . $r['@uid']);
      }
      elseif (($f == '@user_edit') and (($r['@uid'] == $user->uid) or ($can_edit))) {
        $row[] = l($fields[$f]['template'], "user/" . $r['@uid'] . "/edit", array('query' => $destination));
      }
      else {
        $row[] = '';
      }
    }
    
    $rows[] = $row;
  }
  
  if (variable_get('site_user_list_d_show', 1)) {
    $form['d_fs'] = array(
      '#type' => 'fieldset',
      '#title' => t('Display Options'),
      '#weight' => variable_get('site_user_list_d_weight', -2),
      '#collapsible' => true,
      '#collapsed' => true,
      '#attributes' => array('class' => 'site-user-list-checkboxes-form', 'id' => 'site-user-list-display-options'),
    );
    $form['d_fs']['d'] = array(
      '#type' => 'checkboxes',
      '#options' => $display_available,
      '#default_value' => $display,
    );
    $form['d_fs'][] = array(
      '#type' => 'submit',
      '#value' => t('Update display'),
    );
  }
  
  if (variable_get('site_user_list_s_show', 1)) {
    $form['s'] = array(
      '#type' => 'fieldset',
      '#title' => t('Search Options'),
      '#weight' => variable_get('site_user_list_s_weight', -1),
      '#collapsible' => true,
      '#collapsed' => true,
      '#tree' => true,
      '#attributes' => array('id' => 'site-user-list-search-options'),
    );
    $form['s']['_initial_text'] = array(
      '#type' => 'markup',
      '#value' => t('Display users where:'),
      '#weight' => -1000,
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
    
    // get the additional search forms using the hook we've defined
    // the hook should return an array like:
    // array('fieldset_name' => form_api_defined_fieldset)
    $sforms = module_invoke_all('site_user_list_search_form', $_REQUEST['s']);
    $sforms_total = count($sforms);
    $sforms_current = 0;
    foreach ($sforms as $module => $module_form) {
      $form['s'][$module] = $module_form;
      $sforms_current++;
      if ($sforms_current < $sforms_total) {
        $form['s'][$module]['#suffix'] .= '<p><strong>' . t('and') . '</strong></p>';
      }
    }

    $form['s'][] = array(
      '#type' => 'submit',
      '#value' => t('Find Users'),
      '#prefix' => "<p>\n",
      '#suffix' => "</p>\n",
    );
  }
  
  if (variable_get('site_user_list_r_show', 1)) {
    $form['results'] = array(
      '#type' => 'fieldset',
      '#weight' => variable_get('site_user_list_r_weight', 0),
      '#attributes' => array('id' => 'site-user-list-results'),
    );
    if (variable_get('site_user_list_s_before', 0) and (count($descriptions))) {
      $form['results']['s_before'] = array(
        '#type' => 'markup',
        '#value' => theme('item_list', $descriptions),
        '#prefix' => '<div class="site-user-list-results-filter" id="site-user-list-results-filter-before"><p>' . t('Filters:') . '</p>',
        '#suffix' => '</div>',
      );
    }
    $form['results']['results_table'] = array(
      '#type' => 'markup',
      '#value' => theme('table', $display_header, $rows),
    );
    if (variable_get('site_user_list_r_count', 1)) {
      $form['results']['count'] = array(
        '#type' => 'markup',
        '#value' => format_plural(count($rows), 'Displaying @count entry', 'Displaying @count entries'),
        '#prefix' => '<p id="site-user-list-results-count">',
        '#suffix' => '</p>',
      );
    }
    if (variable_get('site_user_list_s_after', 0) and (count($descriptions))) {
      $form['results']['s_after'] = array(
        '#type' => 'markup',
        '#value' => theme('item_list', $descriptions),
        '#prefix' => '<div class="site-user-list-results-filter" id="site-user-list-results-filter-after"><p>' . t('Filters:') . '</p>',
        '#suffix' => '</div>',
      );
    }
    if (variable_get('site_user_list_display_sql_query', 0)) {
      $form['results']['sql'] = array(
        '#type' => 'markup',
        '#value' => check_plain($sql),
        '#prefix' => '<p id="site-user-list-results-sql">',
        '#suffix' => '</p>',
      );
    }
  }

  return $form;
}

/**
 * the rebuild page
 * shouldn't really be used much
 */
function site_user_list_rebuild_page() {
  site_user_list_build();
  drupal_set_message('The database information has been rebuilt');
  drupal_goto('site_user_list');
}

/**
 * this utility function will properly escape a column name (like '@uid')
 * so that the database doesn't complain.
 */
function site_user_list_escape_column($c) {
  global $db_type;
  switch ($db_type) {
    case 'mysql':
    case 'mysqli':
      return "`$c`";
      break;

    case 'pgsql':
      return "\"$c\"";
      break;
    
    default:
      return $c;
      break;
  }
}

/**
 * The following hooks would be in user.module if this module were being given
 * affordances by core
 */

// information about fields to be displayed
function user_site_user_list_fields() {
  return array(
    // @uid is included so that the user can control it.  It will always
    // be included in the select statement so we don't need to have a db_column for it
    '@uid' => array(
      'display_name' => 'User ID',
      'description' => 'The user id',
      'column_header' => 'User ID',
      'default_template' => '@uid',
      'eval_template' => false,
      'search_column' => '@uid',
      'sort_column' => '@uid',
    ),
    '@name' => array(
      'display_name' => 'User name',
      'description' => 'The user\'s login name',
      'db_column' => '@name',
      'column_header' => 'User name',
      'default_template' => '@name',
      'eval_template' => false,
      'search_column' => '@name',
      'sort_column' => '@name',
    ),
    '@mail' => array(
      'display_name' => 'Email address',
      'description' => 'The user\'s email address',
      'db_column' => '@mail',
      'column_header' => 'Email address',
      'default_template' => '<a href="mailto:@mail">@mail</a>',
      'eval_template' => false,
      'search_column' => '@mail',
      'sort_column' => '@mail',
    ),
    
    '@picture' => array(
      'display_name' => 'User Avatar',
      'description' => 'The user\'s uploaded picture',
      'db_column' => '@picture',
      'column_header' => '',
      'eval_template' => false,
      'default_template_condition_columns' => '@picture',
      'default_template' => '<img src="@_base/@picture" alt="" />',
    ),
    
    // these two columns are place holders, which get special cased all over the place.
    // By putting them here, the user can control them.
    '@user_view' => array(
      'display_name' => 'View User column',
      'description' => 'Displays a column with a link to user\'s profile. This column is specially handled; the template is the text displayed for the link.',
      'default_template' => 'view',
      'eval_template' => false,
    ),
    '@user_edit' => array(
      'display_name' => 'Edit User column',
      'description' => 'Displays a column with a link to edit the user\'s profile. This column is specially handled; the template is the text displayed for the link.',
      'default_template' => 'edit',
      'eval_template' => false,
    ),
  );
}

// add in the fields to the sql query
function user_site_user_list_query_sql($allowed) {
  $ret = array();
  $user_fields = array('name', 'mail', 'picture');
  foreach ($user_fields as $f) {
    if ($allowed["@$f"]) {
      $ret['cols'][] = 'u.' . $f . ' as ' . site_user_list_escape_column("@$f");
    }
  }
  if (!empty($ret)) {
    return array('user' => $ret);
  }
}

/**
 * The following hooks would be in profile.module if this module
 * were at all worthy of being in core
 */

// the settings for which fields to display
function profile_site_user_list_settings_form() {
  drupal_add_css(drupal_get_path('module', 'site_user_list') . '/site_user_list.css');

  $form = array();
  
  $form['privacy'] = array(
    '#type' => 'fieldset',
    '#title' => t('Field Privacy Settings'),
  );
  $form['privacy']['profile_site_user_list_visible_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select what profile fields are available for inclusion'),
    '#description' => t('Profile fields have privacy settings.  By default, you aren\'t allowed to display fields which are supposed to be private.  You can change this here'),
    '#options' => array(
      PROFILE_HIDDEN => t('Hidden profile fields'),
      PROFILE_PRIVATE => t('Private profile fields'),
      PROFILE_PUBLIC => t('Public profile fields, content shown on profile page but not used on member list pages'),
      PROFILE_PUBLIC_LISTINGS => t('Public profile field, content shown on profile page and on member list pages'),
    ),
    '#default_value' => variable_get('profile_site_user_list_visible_fields', array(PROFILE_PUBLIC, PROFILE_PUBLIC_LISTINGS)),
  );
  
  $form['exclusion'] = array(
    '#type' => 'fieldset',
    '#title' => t('User exclusion settings'),
  );
  
  $checkbox_fields_q = db_query("SELECT fid, title FROM {profile_fields} WHERE type = 'checkbox'");
  $checkboxes = array();
  $checkboxes[0] = '<none>';
  while($c = db_fetch_array($checkbox_fields_q)) {
    $checkboxes[$c['fid']] = $c['title'];
  }
  
  $form['exclusion']['profile_site_user_list_exclude_fid'] = array(
    '#type' => 'select',
    '#title' => t('Exclude users where the following checkbox'),
    '#options' => $checkboxes,
    '#default_value' => variable_get('profile_site_user_list_exclude_fid', 0),
  );
  $form['exclusion']['profile_site_user_list_exclude_set'] = array(
    '#type' => 'select',
    '#title' => t('Is'),
    '#options' => array('not_checked' => 'not checked', 'checked' => 'checked'),
    '#default_value' => variable_get('profile_site_user_list_exclude_set', 'checked'),
  );
  
  $form[] = array(
    '#type' => 'submit',
    '#value' => 'Save settings',
  );

  return $form;
}

function profile_site_user_list_settings_form_submit($form, &$form_state) {
  variable_set('profile_site_user_list_visible_fields', $form_state['values']['profile_site_user_list_visible_fields']);

  variable_set('profile_site_user_list_exclude_fid', $form_state['values']['profile_site_user_list_exclude_fid']);
  variable_set('profile_site_user_list_exclude_set', $form_state['values']['profile_site_user_list_exclude_set']);

  site_user_list_build();

  drupal_set_message("The settings have been saved");
}

// return the list of available profile.module fields
function profile_site_user_list_fields() {
  $ret = array();
  
  $visible_array = array_filter(variable_get('profile_site_user_list_visible_fields', array(PROFILE_PUBLIC, PROFILE_PUBLIC_LISTINGS)));
  
  $f_q = db_query("SELECT name, title, explanation FROM {profile_fields} WHERE visibility in (" . implode(',', $visible_array) . ") ORDER BY category, weight, fid");
  while($f = db_fetch_array($f_q)) {
    $col = '@' . $f['name'];
    $ret[$col] = array(
      'display_name' => 'Profile: ' . $f['title'],
      'description' => $f['title'] . ($f['explanation'] != '' ? ': ' . $f['explanation'] : ''),
      'db_column' => $col,
      'column_header' => $f['title'],
      'default_template' => $col,
      'eval_template' => false,
      'search_column' => $col,
      'sort_column' => $col,
    );
  }
  
  return $ret;
}

// modify the internal SQL statement
function profile_site_user_list_query_sql($allowed = array()) {
  $ret = array();
  $fields_query = db_query("SELECT fid, name from {profile_fields} ORDER BY category, weight, fid");
  while($field = db_fetch_array($fields_query)) {
    if ($allowed['@' . $field['name']]) {
      $fid = $field['fid'];
      $tbl = 't_' . $fid;
      $col = $field['name'];

      $ret['cols'][] = "$tbl.value as " . site_user_list_escape_column("@$col");
      $ret['joins'][] = "LEFT OUTER JOIN {profile_values} as $tbl on (u.uid = $tbl.uid and $tbl.fid = $fid)";
    }
  }
  
  $exclude_fid = variable_get('profile_site_user_list_exclude_fid', 0);
  if ($exclude_fid != 0) {
    $etbl = 't_profile_exclude';
    $ret['joins'][] = "LEFT OUTER JOIN {profile_values} as $etbl on (u.uid = $etbl.uid and $etbl.fid = $exclude_fid)";
  
    $exclude_set = variable_get('profile_site_user_list_exclude_set', 'checked');
    if ($exclude_set == 'checked') {
      $ret['where'][] = "(($etbl.value is null) or ($etbl.value != 1))";
    }
    elseif ($exclude_set == 'not_checked') {
      $ret['where'][] = "($etbl.value = 1)";
    }
  }
  
  if (!empty($ret)) {
    return array('profile' => $ret);
  }
}

// generate a search form
function profile_site_user_list_search_form($search = array()) {
  $ret = array();
  
  // this function can only provide searching for profile.module fields
  // plus a few specific user.module fields
  $profile_fields = array(
    '@uid',
    '@name',
    '@mail',
  );
  $profile_fields_query = db_query("SELECT name FROM {profile_fields} ORDER BY category, weight, fid");
  while($r = db_fetch_array($profile_fields_query)) {
    $profile_fields[] = '@' . $r['name'];
  }
  
  $fields = array();
  $fields_query = db_query("SELECT field_identifier, column_header FROM {site_user_list_fields}
                            WHERE display >= %d AND search_column is not null AND search_column != ''
                            ORDER BY weight",
                            SITE_USER_LIST_MAY_DISPLAY);
  while($r = db_fetch_array($fields_query)) {
    if (in_array($r['field_identifier'], $profile_fields)) {
      $fields[$r['field_identifier']] = $r['column_header'];
    }
  }
  
  $default_which = $search['profile']['which'];
  if (!isset($default_which)) { $default_which = array(); }
  $default_what = $search['profile']['what'];
  if (!isset($default_what)) { $default_what = ''; }
  
  $ret['profile'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contact Information'),
    '#collapsible' => true,
    '#collapsed' => ((isset($default_what) and ($default_what != '')) ? false
                                                                      : true),
    '#attributes' => array('class' => 'site-user-list-checkboxes-form'),
    '#tree' => true,
    '#weight' => -100,
  );
  $ret['profile']['which'] = array(
    '#type' => 'checkboxes',
    '#options' => $fields,
    '#prefix' => '<p>' . t('Any of:') . '</p>',
    '#default_value' => $default_which,
  );
  $ret['profile']['what'] = array(
    '#type' => 'textfield',
    '#prefix' => '<p>' . t('Contains:') . '</p>',
    '#default_value' => $default_what,
  );
  
  return $ret;
}

// provide restrictions
function profile_site_user_list_restrict($search = array()) {
  if ($search['profile']) {
    $which = $search['profile']['which'];
    $what = $search['profile']['what'];
    
    if (count($which) and ($what != '')) {
      $or_clauses = array();
      $column_headings = array();
      foreach ($which as $col) {
        $res = db_fetch_array(db_query("SELECT search_column, column_header FROM {site_user_list_fields} WHERE field_identifier = '%s'", $col));
        $or_clauses[] = "(cd." . site_user_list_escape_column($res['search_column']) . " like '%%" . db_escape_string($what) . "%%')";
        $column_headings[] = '"' . $res['column_header'] . '"';
      }
      
      if (count($or_clauses)) {
        $or_clause = implode(" or ", $or_clauses);
        if (count($or_clauses) > 1) {
          $or_clause = '(' . $or_clause . ')';
        }
        
        $description = "Any of the fields " . implode(" or ", $column_headings) . " contains the text \"" . $what . "\"";
        
        
        return array('profile' => array('where' => array($or_clause), 'description' => array($description)));
      }
    }
  }
}

/**
 * site_user_list_tablesort_sql is a replacement for 
 * tablesort_sql.
 *
 * tablesort_sql removes the '@' signs and the various escapes (`, ...)
 * from the column names, which breaks it...
 */
function site_user_list_tablesort_sql ($header, $before = '') {
  $ts = tablesort_init($header);
  if ($ts['sql']) {
    // Based on code from db_escape_table(), but this can also contain a dot.
    //$field = preg_replace('/[^A-Za-z0-9_.]+/', '', $ts['sql']);
    $field = db_escape_string($ts['sql']);

    // Sort order can only be ASC or DESC.
    $sort = drupal_strtoupper($ts['sort']);
    $sort = in_array($sort, array('ASC', 'DESC')) ? $sort : '';

    return " ORDER BY $before $field $sort";
  }
}
